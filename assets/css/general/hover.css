/*
=====
DEPENDENCIES
=====
*/

/* dependcies for link */
.r-link{
  display: var(--rLinkDisplay, inline-flex) !important;
}

.r-link[href]{
  color: var(--rLinkColor) !important;
  text-decoration: var(--rLinkTextDecoration, none) !important;
}

/* 
outlined text
*/ 

.text-outlined{
  --uiTextOutlinedWeight: var(--textOutlinedWeight, 2px);
  --uiTextOutlinedLineColor: var(--textOutlinedLineColor, currentColor);

  padding: var(--textOutlinedPadding, .25rem);
  position: var(--textOutlinedPosition, relative);
}

.text-outlined__label{
  display: var(--textOutlinedLabelDisplay, block);
}

.text-outlined::before,
.text-outlined::after,
.text-outlined__label::before,
.text-outlined__label::after{
  content: "";     
  background-color: var(--uiTextOutlinedLineColor);
  position: absolute; 
}

.text-outlined::before, 
.text-outlined::after{
  width: 100%;
  height: var(--uiTextOutlinedWeight);
  left: 0;
}

.text-outlined__label::before,
.text-outlined__label::after{
  width: var(--uiTextOutlinedWeight);
  height: 100%;
  top: 0;
}

.text-outlined::before{
  top: 0;
}

.text-outlined::after{
  bottom: 0;
}

.text-outlined__label::before{
  left: 0;
}

.text-outlined__label::after{
  right: 0;
}

/*
adapters
*/

.text-outlined:not(.r-link):not(.r-button){
  display: var(--textOutlinedDisplay, inline-flex);
  color: var(--textOutlinedColor, currentColor);
}

.text-outlined.r-link{
  --rLinkDisplay: var(--textOutlinedDisplay);
  --rLinkColor: var(--textOutlinedColor, currentColor);
}

.text-underlined{
  /*
  1. I use pixels units because others units (em, rem, vw, vh, etc) can
  lead to the mistake of displaying a circumcised line
  */

  --uiTextUnderlinedLineHeight: var(--textUnderlinedLineHeight, 2px); /* 1 */
  --uiTextUnderlinedLineGap: var(--textUnderlinedLineGap, .5rem);
  --uiTextUnderlinedPaddingBottom: calc(var(--uiTextUnderlinedLineHeight) + var(--uiTextUnderlinedLineGap));

  padding-bottom: var(--uiTextUnderlinedPaddingBottom) !important;
  position: var(--textUnderlinedPosition, relative) !important;
}

.text-underlined::after{
  content: "";
  width: var(--textUnderlinedLineWidht, 100%) !important;
  height: var(--uiTextUnderlinedLineHeight) !important;

  background-color: var(--textUnderlinedLineColor, currentColor) !important;

  position: absolute;
  left: var(--textUnderlinedLineLeft, 0) !important;
  bottom: var(--textUnderlinedLineBottom, 0) !important;
}

/* 
text flat
*/ 

.text-flat{
  position: relative;
  z-index: 0;
}

.text-flat::before, 
.text-flat::after{
  content: "";
  background-color: var(--textFlatBackgroundColor, #000);	
  position: absolute;
  z-index: -1;
}

.text-flat__label{
  padding: var(--textFlatPadding, .25rem);
}

/*
=====
EXTENSIONS FOR ANIMATIONS
=====
*/

/* 
text-outlined extension

1. 
The transition property isn't used because there are limits of the 
transition property syntax, particularly multiple values can't be used. 
*/ 

.text-outlined{
  --uiTextOutlineLineTransitionPropertyDefault: var(--textOutlineLineTransitionPropertyDefault, transform, opacity);
  --uiTextOutlineLineTransitionDurationDefault: var(--textOutlineLineTransitionDurationDefault, .2s, .15s);
  --uiTextOutlineLineTransitionTimingFunctionDefault: var(--textOutlineLineTransitionTimingFunctionDefault, ease-out);
  --uiTextOutlineLineTransitionDelayDefault: var(--textOutlineLineTransitionDelayDefault, 0s, .15s);
  --uiTextOutlineLineWillChangeDefault: var(--textOutlineLineWillChangeDefault, transform, opacity);
  
  overflow: hidden;
}

.text-outlined::before{
  transform: var(--textOutlineTopLineTransform, translate3d(-105%, 0, 0));
  transition-property: var(--textOutlineTopLineTransitionProperty, var(--uiTextOutlineLineTransitionPropertyDefault)); /* 1 */
  transition-duration: var(--textOutlineTopLineTransitionDuration, var(--uiTextOutlineLineTransitionDurationDefault)); /* 1 */
  transition-timing-function: var(--textOutlineTopLineTransitionTimingFunction, var(--uiTextOutlineLineTransitionTimingFunctionDefault)); /* 1 */
  transition-delay: var(--textOutlineTopLineTransitionDelay, var(--uiTextOutlineLineTransitionDelayDefault)); /* 1 */
  will-change: var(--textOutlineTopLineWillChange, var(--uiTextOutlineLineWillChangeDefault));
}

.text-outlined::after{
  transform: var(--textOutlineBottomLineTransform, translate3d(105%, 0, 0));
  transition-property: var(--textOutlineBottomLineTransitionProperty, var(--uiTextOutlineLineTransitionPropertyDefault)); /* 1 */
  transition-duration: var(--textOutlineBottomLineTransitionDuration, var(--uiTextOutlineLineTransitionDurationDefault)); /* 1 */
  transition-timing-function: var(--textOutlineBottomLineTransitionTimingFunction, var(--uiTextOutlineLineTransitionTimingFunctionDefault)); /* 1 */
  transition-delay: var(--textOutlineBottomLineTransitionDelay, var(--uiTextOutlineLineTransitionDelayDefault)); /* 1 */
  will-change: var(--textOutlineBottomLineWillChange, var(--uiTextOutlineLineWillChangeDefault));
}

.text-outlined__label::before{
  transform: var(--textOutlineLeftLineTransform, translate3d(0%, -100%, 0));
  transition-property: var(--textOutlineLeftLineTransitionProperty, var(--uiTextOutlineLineTransitionPropertyDefault)); /* 1 */
  transition-duration: var(--textOutlineLeftLineTransitionDuration, var(--uiTextOutlineLineTransitionDurationDefault)); /* 1 */
  transition-timing-function: var(--textOutlineLeftLineTransitionTimingFunction, var(--uiTextOutlineLineTransitionTimingFunctionDefault)); /* 1 */
  transition-delay: var(--textOutlineLeftLineTransitionDelay, var(--uiTextOutlineLineTransitionDelayDefault)); /* 1 */
  will-change: var(--textOutlineLeftLineWillChange, var(--uiTextOutlineLineWillChangeDefault))
}

.text-outlined__label::after{
  transform: var(--textOutlineRightLineTransform, translate3d(0%, 100%, 0));
  transition-property: var(--textOutlineRightLineTransitionProperty, var(--uiTextOutlineLineTransitionPropertyDefault)); /* 1 */
  transition-duration: var(--textOutlineRightLineTransitionDuration, var(--uiTextOutlineLineTransitionDurationDefault));  /* 1 */
  transition-timing-function: var(--textOutlineRightLineTransitionTimingFunction, var(--uiTextOutlineLineTransitionTimingFunctionDefault)); /* 1 */
  transition-delay: var(--textOutlineRightLineTransitionDelay, var(--uiTextOutlineLineTransitionDelayDefault)); /* 1 */
  will-change: var(--textOutlineRightLineWillChange, var(--uiTextOutlineLineWillChangeDefault));
}

.text-outlined::before,
.text-outlined::after,
.text-outlined__label::before,
.text-outlined__label::after{
  opacity: 0;
}

.text-outlined:hover::before,
.text-outlined:hover::after,
.text-outlined:hover .text-outlined__label::before,
.text-outlined:hover .text-outlined__label::after{
  opacity: 1;
}

/*
text-underlined extension

1. 
The transition property isn't used because there are limits of the 
transition property syntax, particularly multiple values can't be used. 
*/

.text-underlined{
  overflow: hidden;
}

.text-underlined::after{
  transform: var(--textUnderlinedLineTransform);
  transition-property: var(--textUnderlinedLineTransitionProperty, transform); /* 1 */
  transition-duration: var(--textUnderlinedLineTransitionDuration, .2s);  /* 1 */
  transition-timing-function: var(--textUnderlinedLineTransitionTimingFunction, ease-in); /* 1 */
  transition-delay: var(--textUnderlinedLineTransitionDelay, 0s); /* 1 */
  will-change: var(--textUnderlinedLineWillChange, transform);
}

/* 
flat text extension

1. 
The transition property isn't used because there are limits of the 
transition property syntax, particularly multiple values can't be used. 
*/ 

.text-flat{
  --uiTextFlatPlanesOpacityDefault: var(--textFlatPlanesOpacityDefault, 0);
  --uiTextFlatPlanesTransitionPropertyDefault: var(--textFlatPlanesTransitionPropertyDefault, transform, opacity);
  --uiTextFlatPlanesTransitionDurationDefault: var(--textFlatPlanesTransitionDurationDefault, .2s);  
  --uiTextFlatPlanesTransitionTimingDefault: var(--textFlatPlanesTransitionTimingDefault,  ease-out);
  --uiTextFlatPlanesTransitionDelayDefault: var(--textFlatPlanesTransitionDelayDefault, 0, .03s);

  overflow: hidden;
  transition-property: var(--textFlatTransitionProperty, color); /* 1 */
  transition-duration: var(--textFlatFirstPlaneTransitionDuration, .3s); /* 1 */
  transition-timing-function: var(--textFlatTransitionTimingFunction, ease-out); /* 1 */
  transition-delay: var(--textFlatTransitionDelay); /* 1 */
}

.text-flat__label{
  display: block;
}

.text-flat::before{
  width: var(--textFlatFirstPlaneWidth, auto);
  height: var(--textFlatFirstPlaneHeight, auto);

  top: var(--textFlatFirstPlaneTop, auto);
  right: var(--textFlatFirstPlaneRight, auto);
  bottom: var(--textFlatFirstPlaneBottom, auto);
  left: var(--textFlatFirstPlaneLeft, auto);

  opacity: var(--textFlatFirstPlaneOpacity, var(--uiTextFlatPlanesOpacityDefault));	
  transform: var(--textFlatFirstPlaneTransform);
  transition-property: var(--textFlatFirstPlaneTransitionProperty, var(--uiTextFlatPlanesTransitionPropertyDefault)); /* 1 */
  transition-duration: var(--textFlatFirstPlaneTransitionDuration, var(--uiTextFlatPlanesTransitionDurationDefault)); /* 1 */  
  transition-timing-function: var(--textFlatFirstPlaneTransitionTimingFunction, var(--uiTextFlatPlanesTransitionTimingDefault)); /* 1 */
  transition-delay: var(--textFlatFirstPlaneTransitionDelay, var(--uiTextFlatPlanesTransitionDelayDefault)); /* 1 */
}

.text-flat::after{
  width: var(--textFlatSecondPlaneWidth, auto);
  height: var(--textFlatSecondPlaneHeigth, auto);

  top: var(--textFlatSecondPlaneTop, auto);
  right: var(--textFlatSecondPlaneRight, auto);
  bottom: var(--textFlatSecondPlaneBottom, auto);
  left: var(--textFlatSecondPlaneLeft, auto);  

  transform: var(--textFlatSecondPlaneTransform);
  opacity: var(--textFlatSecondPlaneOpacity, var(--uiTextFlatPlanesOpacityDefault));	
  transition-property: var(--textFlatSecondPlaneTransitionProperty, var(--uiTextFlatPlanesTransitionPropertyDefault)); /* 1 */
  transition-duration: var(--textFlatSecondPlaneTransitionDuration, var(--uiTextFlatPlanesTransitionDurationDefault)); /* 1 */
  transition-timing-function: var(--textFlatSecondPlaneTransitionTimingFunction, var(--uiTextFlatPlanesTransitionTimingDefault)); /* 1 */
  transition-delay: var(--textFlatSecondPlaneTransitionDelay, var(--uiTextFlatPlanesTransitionDelayDefault)); /* 1 */
}

/*
adapters
*/

.text-flat:not(.r-link):hover{
  color: var(--textFlatColorHover, #fff);
}

.r-link.text-flat:hover{
  --rLinkColor: var(--textFlatColorHover, #fff);
}

/* 
sliding text

1. 
The transition property isn't used because there are limits of the 
transition property syntax, particularly multiple values can't be used. 
*/ 

.text-sliding{
  --uiTextSlidingColorDefault: var(--textSlidingColorDefault, currentColor);
  --uiTextSlidingTransitionPropertyDefault: var(--textSlidingTransitionPropertyDefault, transform);
  --uiTextSlidingTransitionDurationDefault: var(--textSlidingTransitionDurationDefault, .35s);  
  --uiTextSlidingTransitionDelayDefault: var(--textSlidingTransitionDelayDefault);
  --uiTextSlidingTransitionTimingDefault: var(--textSlidingTransitionTimingDefault, cubic-bezier(.86, .6, .08, 1.01)); 
  --uiTextSlidingWillChangeDefault: var(--textSlidingWillChangeDefault, transform);

  position: relative;
  overflow: hidden;
}

.text-sliding::before{
  content: attr(data-text-sliding);
  position: absolute;
}

.text-sliding::before{
  color: var(--textSlidingBackColor, var(--uiTextSlidingColorDefault));
  
  transform: var(--textSlidingBackTransform);
  transition-property: var(--textSlidingBackTransitionProperty, var(--uiTextSlidingTransitionPropertyDefault)); /* 1 */
  transition-timing-function: var(--textSlidingBackTransitionTimingFunction, var(--uiTextSlidingTransitionTimingDefault)); /* 1 */
  transition-duration: var(--textSlidingBackTransitionDuration, var(--uiTextSlidingTransitionDurationDefault)); /* 1 */
  transition-delay: var(--textSlidingBackTransitionDelay, var(--uiTextSlidingTransitionDelayDefault)); /* 1 */
  will-change: var(--textSlidingBackWillChange, var(--uiTextSlidingWillChangeDefault));
}

.text-sliding__label{
  display: var(--textSlidingFrontDisplay, block);
  color: var(--textSlidingFrontColor, var(--uiTextSlidingColorDefault));
  
  transform: var(--textSlidingFrontTransform);
  transition-property: var(--textSlidingBackTransitionProperty, var(--uiTextSlidingTransitionPropertyDefault)); /* 1 */
  transition-duration: var(--textSlidingBackTransitionDuration, var(--uiTextSlidingTransitionDurationDefault)); /* 1 */
  transition-timing-function: var(--textSlidingBackTransitionTimingFunction, var(--uiTextSlidingTransitionTimingDefault)); /* 1 */
  transition-delay: var(--textSlidingBackTransitionDelay, var(--uiTextSlidingTransitionDelayDefault)); /* 1 */
  will-change: var(--textSlidingFrontWillChange, var(--uiTextSlidingWillChangeDefault));
}

/* dependencies for button */
.r-button {
	--uirButtonBackgroundColor: var(--rButtonBackgroundColor, transparent);
	--uirButtonPadding: var(
		--rButtonPadding,
		var(--rButtonPaddingTop, 0) var(--rButtonPaddingRight, 0)
			var(--rButtonPaddingBottom, 0) var(--rButtonPaddingLeft, 0)
	);
	--uirButtonBorderWidth: var(--rButtonBorderWidth, 0);
	--uirButtonBorderStyle: var(--rButtonBorderWidth, solid);
	--uirButtonBorderColor: var(--rButtonBorderColor, currentColor);
	--uirButtonFontFamily: var(--rButtonFontFamily, inherit);
	--uirButtonFontSize: var(--rButtonFontSize, inherit);
	--uirButtonColor: var(--rButtonColor);

	background-color: var(--uirButtonBackgroundColor);
	padding: var(--uirButtonPadding);

	border-width: var(--uirButtonBorderWidth);
	border-style: var(--uirButtonBorderStyle);
	border-color: var(--uirButtonBorderColor);

	cursor: pointer;

	font-family: var(--uirButtonFontFamily);
	font-size: var(--uirButtonFontSize);
}

.r-button::-moz-focus-inner,
.r-button[type="button"]::-moz-focus-inner,
.r-button[type="reset"]::-moz-focus-inner,
.r-button[type="submit"]::-moz-focus-inner {
	/* Remove the inner border and padding in Firefox. */

	border-style: none;
	padding: 0;
}

/* The component will reset browser's styles of link */

.r-link {
	--uirLinkDisplay: var(--rLinkDisplay, inline-flex);
	--uirLinkTextColor: var(--rLinkTextColor);
	--uirLinkTextDecoration: var(--rLinkTextDecoration, none);
	display: var(--uirLinkDisplay) !important;
	color: var(--uirLinkTextColor) !important;
	text-decoration: var(--uirLinkTextDecoration) !important;
}

/*
=====
CORE STYLES
=====
*/

.ai-element {
	--uiaiElementDisplay: var(--aiElementDisplay, inline-flex);
	--uiaiElementPadding: var(
		--aiElementPadding,
		var(--aiElementPaddingTop, 0) var(--aiElementPaddingRight, 0)
			var(--aiElementPaddingBottom, 0) var(--aiElementPaddingLeft, 0)
	);
	--uiaiElementColor: var(--aiElementColor);

	display: var(--uiaiElementDisplay);
	position: relative;
	overflow: hidden;
}

a.ai-element {
	padding: var(--uiaiElementPadding);
}

button.ai-element {
	--rButtonPadding: var(--uiaiElementPadding);
}

.ai-element__label {
	color: var(--uiaiElementColor);
}

/* 
Styles of elements with background
*/

.ai-element_type3 {
	--uiaiElementLineColor: var(--aiElementLineColor, #000);
	--uiaiElementPadding: var(--aiElementPadding, 10px);
	transition: color 0.3s ease-out;
	z-index: 1;
}

.ai-element_type3::before,
.ai-element_type3::after {
	content: "";
	background-color: var(--uiaiElementLineColor);
	opacity: 1;
	position: absolute;
	z-index: -1;

	transition: transform 0.35s ease-out, opacity 0.35s ease-out 0.03s;
}

.ai-element_type3:hover::before,
.ai-element_type3:hover::after {
	opacity: 0;
	transition-delay: 0s;
}

.ai-element_text::before {
	content: attr(data-ai-element-text);
	color: var(--uiaiElementColorHover);
	position: absolute;
}

.ai-element_text::before,
.ai-element_text .ai-element__label {
	transition-property: transform;
	transition-timing-function: cubic-bezier(0.86, 0.6, 0.08, 1.01);
	transition-duration: 0.4s;
}

.ai-element_text:hover::before,
.ai-element_text:hover .ai-element__label {
	transition-duration: 0.3s;
}



/*
=====
EFFECTS
=====
*/


.text-underlined_v3{
  --textUnderlinedLineTransform: translate3d(-105%, 0, 0);
}

.text-underlined_v3:hover{
  --textUnderlinedLineTransform: translate3d(0, 0, 0);
}


.text-sliding_v7{
  --textSlidingBackTransform: translate3d(-110%, 0, 0);
  --textSlidingFrontTransform: translate3d(0, 0, 0);
}

.text-sliding_v7:hover{
  --textSlidingBackTransform: translate3d(0, 0, 0);
  --textSlidingFrontTransform: translate3d(110%, 0, 0);
}

/* effect 9 */

.ai-element9::before,
.ai-element9::after {
	width: 51%;
	height: 100%;
	top: 0;
	transform: translate3d(0, 0, 0);
}

.ai-element9::before {
	left: 0;
}

.ai-element9::after {
	right: 0;
}

.ai-element9:hover::before {
	transform: translate3d(-100%, 0, 0) rotate(-45deg);
}

.ai-element9:hover::after {
	transform: translate3d(100%, 0, 0) rotate(-45deg);
}


.ai-element__label {
	--uiaiElementColorHover: var(--aiElementColorHover);
}

.ai-element:hover .ai-element__label {
	color: var(--uiaiElementColorHover);
}

/*
=====
SETTINGS
=====
*/

/* settings of button */
.ai-element {
	--aiElementLineWeight: 5px;
	--aiElementLineColor: #000000;
	--aiElementColor: #1b255a;
	--aiElementColorHover: #000000;
}

.ai-element_type1,
.ai-element_type3 {
	--aiElementPadding: 10px 15px;
}

.ai-element_type3 {
	--aiElementColor: #fff;
}

/* setting of link */


:root{
  --textOutlinedWeight: 5px;
  --textOutlinedLineColor: #243aab;
  --textOutlinedPadding: .75rem 1rem;
  --textUnderlinedLineHeight: 5px;
  --textUnderlinedLineGap: .25rem;
  --textUnderlinedLineColor: #243aab;
  --textFlatBackgroundColor: #243aab;
  --textFlatPadding: .75rem;
}

.text-flat{
  --linkTextColorHover: #fff;
}


